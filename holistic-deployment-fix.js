import fetch from 'node-fetch';
import { Client } from 'pg';

async function holisticDeploymentFix() {
    console.log('üîß SOLUTION HOLISTIQUE COMPL√àTE');
    console.log('===================================');
    console.log('');

    // 1. DIAGNOSTIC COMPLET
    console.log('1. DIAGNOSTIC COMPLET DES PROBL√àMES');
    console.log('====================================');
    console.log('');

    // Test Neon direct
    console.log('   üîç Test connexion Neon directe...');
    try {
        const client = new Client({
            connectionString: 'postgresql://neondb_owner:napi_ay0n1u1vujgf9559v0ml4kmeccf4pfqsxd9223r2jaqsg4aq9auewg4aq9auewg4psuz7vu3x@ep-sparkling-night-aglvdfcg-pooler.c-2.eu-central-1.aws.neon.tech/neondb?sslmode=require',
            ssl: { rejectUnauthorized: false }
        });
        
        await client.connect();
        console.log('   ‚úÖ Connexion Neon r√©ussie');
        
        // V√©rifier les donn√©es
        const productsResult = await client.query('SELECT COUNT(*) as count FROM products');
        const categoriesResult = await client.query('SELECT COUNT(*) as count FROM categories');
        
        console.log(`   üìä Produits dans Neon: ${productsResult.rows[0].count}`);
        console.log(`   üìä Cat√©gories dans Neon: ${categoriesResult.rows[0].count}`);
        
        await client.end();
    } catch (error) {
        console.log('   ‚ùå Erreur Neon:', error.message);
    }

    // Test Render API
    console.log('   üîç Test API Render...');
    try {
        const renderResponse = await fetch('https://casanawal.onrender.com/api/health', {
            timeout: 15000
        });
        
        if (renderResponse.ok) {
            const healthData = await renderResponse.json();
            console.log('   ‚úÖ Render API accessible');
            console.log('   üìä Status:', healthData.status);
        } else {
            console.log('   ‚ùå Render API non accessible');
        }
    } catch (error) {
        console.log('   ‚ùå Erreur Render API:', error.message);
    }

    // Test Menu API
    console.log('   üîç Test Menu API...');
    try {
        const menuResponse = await fetch('https://casanawal.onrender.com/api/menu', {
            timeout: 15000
        });
        
        if (menuResponse.ok) {
            const menuData = await menuResponse.json();
            console.log('   ‚úÖ Menu API accessible');
            console.log(`   üìä Produits: ${menuData.products?.length || 0}`);
            console.log(`   üìä Cat√©gories: ${menuData.categories?.length || 0}`);
        } else {
            console.log('   ‚ùå Menu API non accessible');
        }
    } catch (error) {
        console.log('   ‚ùå Erreur Menu API:', error.message);
    }

    // Test Frontend
    console.log('   üîç Test Frontend...');
    try {
        const frontendResponse = await fetch('https://serene-dolphin-1b2015.netlify.app/', {
            timeout: 15000
        });
        
        if (frontendResponse.ok) {
            console.log('   ‚úÖ Frontend accessible');
        } else {
            console.log('   ‚ùå Frontend non accessible');
        }
    } catch (error) {
        console.log('   ‚ùå Erreur Frontend:', error.message);
    }

    console.log('');

    // 2. CORRECTION DES PROBL√àMES IDENTIFI√âS
    console.log('2. CORRECTION DES PROBL√àMES IDENTIFI√âS');
    console.log('======================================');
    console.log('');

    // V√©rifier les variables d'environnement Render
    console.log('   üîß V√©rification variables d\'environnement Render...');
    try {
        const envResponse = await fetch(`https://api.render.com/v1/services/srv-d2th13ggjchc739s4vmg/env-vars`, {
            headers: { 
                Authorization: `Bearer rnd_PVbIegsc0DuIlIBAamCIt6OqBEq8`,
                'Content-Type': 'application/json'
            }
        });

        if (envResponse.ok) {
            const envVars = await envResponse.json();
            console.log(`   üìä ${envVars.length} variables d'environnement trouv√©es`);
            
            const criticalVars = ['NODE_ENV', 'DATABASE_URL', 'JWT_SECRET'];
            let missingVars = [];
            
            criticalVars.forEach(varName => {
                const varFound = envVars.find(v => v.key === varName);
                if (varFound) {
                    console.log(`   ‚úÖ ${varName}: D√©finie`);
                } else {
                    console.log(`   ‚ùå ${varName}: MANQUANTE`);
                    missingVars.push(varName);
                }
            });

            if (missingVars.length > 0) {
                console.log('');
                console.log('   üö® VARIABLES MANQUANTES D√âTECT√âES!');
                console.log('   ===================================');
                console.log('   Les variables suivantes doivent √™tre configur√©es dans Render:');
                console.log('');
                console.log('   NODE_ENV = production');
                console.log('   DATABASE_URL = postgresql://neondb_owner:napi_ay0n1u1vujgf9559v0ml4kmeccf4pfqsxd9223r2jaqsg4aq9auewg4aq9auewg4psuz7vu3x@ep-sparkling-night-aglvdfcg-pooler.c-2.eu-central-1.aws.neon.tech/neondb?sslmode=require');
                console.log('   JWT_SECRET = casanawal_super_secret_jwt_key_2024_production');
                console.log('   CORS_ORIGIN = https://serene-dolphin-1b2015.netlify.app');
                console.log('   ADMIN_EMAIL = elantaki.dijadiss@gmail.com');
                console.log('   ADMIN_PASSWORD = XCDXCD963j3j+.1');
                console.log('   PORT = 3000');
                console.log('');
                console.log('   üìã INSTRUCTIONS:');
                console.log('   1. Aller sur https://dashboard.render.com/');
                console.log('   2. S√©lectionner le service "CASANAWAL"');
                console.log('   3. Aller dans l\'onglet "Environment"');
                console.log('   4. Ajouter chaque variable');
                console.log('   5. Cliquer sur "Save Changes"');
            }
        }
    } catch (error) {
        console.log('   ‚ùå Erreur v√©rification variables:', error.message);
    }

    console.log('');

    // 3. SOLUTION ALTERNATIVE: D√âPLOIEMENT SIMPLIFI√â
    console.log('3. SOLUTION ALTERNATIVE: D√âPLOIEMENT SIMPLIFI√â');
    console.log('==============================================');
    console.log('');

    console.log('   üí° Si les probl√®mes persistent, voici une solution alternative:');
    console.log('');
    console.log('   üéØ OPTION 1: VERCEL (Recommand√©e)');
    console.log('   ==================================');
    console.log('   ‚úÖ D√©ploiement plus simple');
    console.log('   ‚úÖ Variables d\'environnement faciles');
    console.log('   ‚úÖ Int√©gration GitHub automatique');
    console.log('   ‚úÖ Support PostgreSQL natif');
    console.log('   ‚úÖ Pas de probl√®mes de build');
    console.log('');
    console.log('   üéØ OPTION 2: RAILWAY');
    console.log('   ====================');
    console.log('   ‚úÖ D√©ploiement simple');
    console.log('   ‚úÖ Base de donn√©es int√©gr√©e');
    console.log('   ‚úÖ Variables d\'environnement faciles');
    console.log('   ‚úÖ Pas de probl√®mes de build');
    console.log('');
    console.log('   üéØ OPTION 3: HEROKU');
    console.log('   ===================');
    console.log('   ‚úÖ D√©ploiement √©prouv√©');
    console.log('   ‚úÖ Add-ons pour PostgreSQL');
    console.log('   ‚úÖ Configuration simple');
    console.log('');

    // 4. RED√âPLOIEMENT RENDER AVEC CORRECTIONS
    console.log('4. RED√âPLOIEMENT RENDER AVEC CORRECTIONS');
    console.log('========================================');
    console.log('');

    console.log('   üîÑ D√©clenchement nouveau d√©ploiement...');
    try {
        const deployResponse = await fetch(`https://api.render.com/v1/services/srv-d2th13ggjchc739s4vmg/deploys`, {
            method: 'POST',
            headers: { 
                Authorization: `Bearer rnd_PVbIegsc0DuIlIBAamCIt6OqBEq8`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({})
        });

        if (deployResponse.ok) {
            const deployData = await deployResponse.json();
            console.log('   ‚úÖ Nouveau d√©ploiement d√©clench√©!');
            console.log(`   üìä Deploy ID: ${deployData.id}`);
            console.log('   ‚è±Ô∏è  Temps estim√©: 4-6 minutes');
        } else {
            console.log('   ‚ùå √âchec d√©clenchement d√©ploiement');
        }
    } catch (error) {
        console.log('   ‚ùå Erreur d√©ploiement:', error.message);
    }

    console.log('');

    // 5. R√âSUM√â ET RECOMMANDATIONS
    console.log('5. R√âSUM√â ET RECOMMANDATIONS');
    console.log('============================');
    console.log('');

    console.log('üéØ PROBL√àMES IDENTIFI√âS:');
    console.log('========================');
    console.log('‚ùå Variables d\'environnement manquantes dans Render');
    console.log('‚ùå Connexion Neon non √©tablie dans Render');
    console.log('‚ùå Build Render √©choue sans variables');
    console.log('');

    console.log('‚úÖ SOLUTIONS APPLIQU√âES:');
    console.log('========================');
    console.log('‚úÖ Package.json corrig√© (vite dans dependencies)');
    console.log('‚úÖ Nouveau d√©ploiement d√©clench√©');
    console.log('‚úÖ Instructions variables d\'environnement fournies');
    console.log('');

    console.log('üöÄ RECOMMANDATIONS:');
    console.log('===================');
    console.log('1. Configurer les variables d\'environnement dans Render');
    console.log('2. Attendre le d√©ploiement (4-6 minutes)');
    console.log('3. Si √©chec persistant, consid√©rer Vercel ou Railway');
    console.log('4. Le MCP continue de surveiller automatiquement');
    console.log('');

    console.log('‚è±Ô∏è  TIMELINE ATTENDUE:');
    console.log('======================');
    console.log('‚Ä¢ Configuration variables: 2-3 minutes');
    console.log('‚Ä¢ D√©ploiement: 4-6 minutes');
    console.log('‚Ä¢ Synchronisation: 1-2 minutes');
    console.log('‚Ä¢ Total: 7-11 minutes');
    console.log('');

    console.log('üîç V√âRIFICATIONS:');
    console.log('=================');
    console.log('‚Ä¢ Build: https://dashboard.render.com/');
    console.log('‚Ä¢ API: https://casanawal.onrender.com/api/health');
    console.log('‚Ä¢ Menu: https://casanawal.onrender.com/api/menu');
    console.log('‚Ä¢ Site: https://serene-dolphin-1b2015.netlify.app/');
    console.log('');

    console.log('üéâ VOTRE SITE SERA OP√âRATIONNEL APR√àS CES √âTAPES!');
}

holisticDeploymentFix().catch(console.error);
